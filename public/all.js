// Generated by CoffeeScript 1.7.1
(function() {
  var Util, artworkUrlWithNoimage, complete, createWorkload, env, getOffset, getUnreadsCount, happynewyear, init8tracks, initChatting, initDoing, initDone, initFixedStart, initHatopoppo, initKpi, initMemo, initMlkcca, initNextkakuhen, initRanking, initSearch, initService, initStart, initWhatis, initYou, login, mlkcca, renderWorkloads, ruffnote, searchMusics, start, start_random, start_unless_doing, syncComment, userIdToIconUrl;

  env = {
    sc_client_id: '2b9312964a1619d99082a76ad2d6d8c6',
    et_client_id: '534872bc1c3389f658f335e241a25efd219fd144'
  };

  env.pomotime = localStorage['dev_pomo'] ? parseFloat(localStorage['dev_pomo']) : 24;

  if (location.host === 'nishikocloud-mlkcca.herokuapp.com') {
    env.pomotime = 0.1;
  }

  env.chattime = localStorage['dev_chat'] ? parseFloat(localStorage['dev_chat']) : 5;

  if (location.href.match(/245cloud.com/)) {
    env.parse_app_id = 'jemiGIUHsvNeVQojqiUaXxFJZvzFDxFbUsfjPr78';
    env.parse_key = 'ZoyMZflFV5H2VoASJv505vJ2wWd9zqa2ZW5MU780';
    env.facebook_app_id = '275431199325537';
    env.milkcocoa = 'io-ui2n0gy4p';
  } else {
    env.parse_app_id = '8QzCMkUbx7TyEApZjDRlhpLQ2OUj0sQWTnkEExod';
    env.parse_key = 'gzlnFfIOoLFQzQ08bU4mxkhAHcSqEok3rox0PBOM';
    env.facebook_app_id = '322004764668180';
    env.milkcocoa = 'io-fi3zt6p3l';
  }

  env.is_kakuhen = false;

  this.env = env;

  this.EightTracks = (function() {
    function EightTracks() {}

    EightTracks.fetch = function(et_id, client_id, callback) {
      var id, url;
      console.log(et_id);
      id = parseInt(et_id);
      if (id > 0) {
        url = "//8tracks.com/mixes/" + et_id + "?format=json&api_key=" + client_id;
      } else {
        url = "//8tracks.com/" + et_id + ".json?api_key=" + client_id;
      }
      return $.get(url, function(track) {
        console.log(track);
        location.hash = "8tracks:" + track.mix.id;
        return callback(track);
      });
    };

    EightTracks.play = function(et_id, $dom, is_autoplay) {
      if (is_autoplay == null) {
        is_autoplay = true;
      }
      return $dom.html("<iframe src=\"http://8tracks.com/mixes/" + et_id + "/player_v3_universal/autoplay\" width=\"300\" height=\"250\" style=\"border: 0px none;\"></iframe>");
    };

    EightTracks.search = function(keyword, client_id, $dom, callback) {
      var url;
      url = "http://api.soundcloud.com/tracks.json?client_id=" + window.env.sc_client_id + "&q=" + keyword + "&duration[from]=" + (24 * 60 * 1000);
      return $.get(url, function(tracks) {
        var artwork, href, track, _i, _len;
        if (tracks[0]) {
          for (_i = 0, _len = tracks.length; _i < _len; _i++) {
            track = tracks[_i];
            artwork = "<img src=\"https://ruffnote.com/attachments/24162\" width='100px'/>";
            if (track.artwork_url) {
              artwork = "<img src=\"" + track.artwork_url + "\" width='100px'/>";
            }
            href = "soundcloud:" + track.id;
            $dom.append("<div class='col-lg-2' style='min-height: 200px;'>\n  <a href='" + track.permalink_url + "' target='_blank'>" + track.title + "</a>\n  (" + (Util.time(track.duration)) + ")<br />\n  <br />\n  " + artwork + "\n  <a href=\"#" + href + "\" class='fixed_start btn btn-default'>再生</a>\n  <!--<a href=\"#\" class='add_playlist btn btn-default'>追加</a>-->\n</div>");
          }
          return callback();
        } else {
          return $dom.append("<div>「" + q + "」SoundCloudにはで24分前後の曲はまだ出てないようです...。他のキーワードで探してみてください！</div>");
        }
      });
    };

    EightTracks.attrip = function($dom) {
      var url;
      url = "http://8tracks.com/users/60650/mixes.jsonapi_key=" + window.env.et_client_id;
      return $.get(url, function(tracks) {
        var a, artwork, href, track, _i, _len, _ref, _results;
        if (tracks.mixes[0]) {
          _ref = tracks.mixes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            track = _ref[_i];
            artwork = "<img src=\"https://ruffnote.com/attachments/24162\" width='100px'/>";
            if (a = track.cover_urls) {
              artwork = "<img src=\"" + a.sq100 + "\" width='100px'/>";
            }
            href = "8tracks:" + track.id;
            _results.push($dom.append("<div class='col-lg-2' style='min-height: 200px;'>\n  <a href='" + track.restful_url + "' target='_blank'>" + track.name + "</a>\n  (" + (Util.time(track.duration * 1000)) + ")<br />\n  <br />\n  " + artwork + "\n  <a href=\"#" + href + "\" class='fixed_start'><img src='https://ruffnote.com/attachments/24353' /></a>\n  <!--<a href=\"#\" class='add_playlist btn btn-default'>追加</a>-->\n</div>"));
          }
          return _results;
        } else {
          return $dom.append("<div>「" + q + "」SoundCloudにはで24分前後の曲はまだ出てないようです...。他のキーワードで探してみてください！</div>");
        }
      });
    };

    return EightTracks;

  })();

  window.fbAsyncInit = function() {
    (function(d, s, id) {
      var fjs, js;
      fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) {
        return;
      }
      js = d.createElement(s);
      js.id = id;
      js.src = "//connect.facebook.net/en_US/all.js";
      return fjs.parentNode.insertBefore(js, fjs);
    })(document, 'script', 'facebook-jssdk');
    Parse.FacebookUtils.init({
      appId: window.env['facebook_app_id'],
      status: true,
      xfbml: true
    });
    return Parse.FacebookUtils.logIn("user_likes", {
      success: function(user) {
        if (!user.existed()) {
          alert("User signed up and logged in through Facebook!");
        } else {
          alert("Facebookログインに成功しました！");
        }
        return FB.api("/me/picture", function(response) {
          if (response && !response.error) {
            user.set('icon_url', response.data.url);
            return FB.api("/me", function(response) {
              if (response && !response.error) {
                user.set('name', response.name);
                user.set('facebook_id_str', response.id);
                user.save();
                return location.reload();
              }
            });
          }
        });
      },
      error: function(user, error) {
        console.log(error);
        return alert("User cancelled the Facebook login or did not fully authorize.");
      }
    });
  };

  this.Mixcloud = (function() {
    function Mixcloud() {}

    Mixcloud.fetch = function(mc_id, callback) {
      var url;
      url = "http://api.mixcloud.com" + mc_id;
      console.log(url);
      return $.getJSON(url, function(track) {
        console.log(track);
        return callback(track);
      });
    };

    Mixcloud.play = function(mc_id, $dom, is_autoplay, start_sec) {
      if (is_autoplay == null) {
        is_autoplay = true;
      }
      if (start_sec == null) {
        start_sec = 0;
      }
      console.log(mc_id);
      return $dom.html("<iframe width=\"660\" height=\"180\" src=\"https://www.mixcloud.com/widget/iframe/?feed=http%3A%2F%2Fwww.mixcloud.com" + (encodeURIComponent(mc_id)) + "&amp;embed_uuid=be4c7df5-5995-4985-97c7-0c64d5ebbefc&amp;replace=0&amp;hide_cover=1&amp;embed_type=widget_standard&amp;hide_tracklist=1&amp;autoplay=" + (is_autoplay ? '1' : '0') + "&start=" + start_sec + "\" frameborder=\"0\"></iframe>");
    };

    Mixcloud.search = function(keyword, $dom, callback) {
      var url;
      if (callback == null) {
        callback = null;
      }
      url = "http://api.mixcloud.com/search/?q=" + keyword + "&type=cloudcast";
      return $.getJSON(url, function(tracks) {
        var artwork, href, track, _i, _len, _ref;
        if (tracks.data) {
          _ref = tracks.data;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            track = _ref[_i];
            artwork = "<img src=\"https://ruffnote.com/attachments/24162\" width='100px'/>";
            if (track.pictures.medium) {
              artwork = "<img src=\"" + track.pictures.medium + "\" width='100px'/>";
            }
            href = "mixcloud:" + track.key;
            $dom.append("<div class='col-lg-2' style='min-height: 200px;'>\n  <a href='" + track.url + "' target='_blank'>" + track.name + "</a>\n  (" + (Util.time(track.audio_length * 1000)) + ")<br />\n  <br />\n  " + artwork + "\n  <a href=\"#" + href + "\" class='fixed_start'><img src='https://ruffnote.com/attachments/24353' /></a>\n  <!--<a href=\"#\" class='add_playlist btn btn-default'>追加</a>-->\n</div>");
          }
          if (callback) {
            return callback();
          }
        } else {
          return $dom.append("<div>「" + q + "」MixCloudはで24分前後の曲はまだ出てないようです...。他のキーワードで探してみてください！</div>");
        }
      });
    };

    return Mixcloud;

  })();

  mlkcca = new MilkCocoa("https://" + this.env.milkcocoa + ".mlkcca.com:443");

  this.socket = mlkcca.dataStore('workload');

  this.socket.on('push', function(params) {
    console.log('mlkcca', params);
    params = params.value;
    if (params.type === 'comment') {
      return this.addComment(params.id2, params.comment, params.is_countup);
    } else if (params.type === 'doing') {
      return this.addDoing(params.workload);
    } else if (params.type === 'chatting') {
      return this.addChatting(params.workload);
    } else if (params.type === 'finish') {
      return this.stopUser(params.workload.user.objectId);
    }
  });

  this.ParseBatch = (function() {
    function ParseBatch() {}

    ParseBatch["do"] = function() {
      var cond;
      console.log("rooms in the batch");
      ParseParse.all("Room", function(rooms) {
        var room, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rooms.length; _i < _len; _i++) {
          room = rooms[_i];
          _results.push(ParseParse.where("Comment", [['room_id', room.id]], function(room, comments) {
            room.set('comments_count', comments.length);
            return room.save();
          }, room, 1000000));
        }
        return _results;
      });
      console.log("kpi in the batch");
      cond = [['is_done', true], ['synchro_start', null], ['user', Parse.User.current()]];
      return ParseParse.where("Workload", cond, function(workloads) {
        var workload, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = workloads.length; _i < _len; _i++) {
          workload = workloads[_i];
          console.log('workload in kpi batch');
          cond = [['is_done', true], ['createdAt', '>', Util.minAgo(24 + 5, workload.createdAt)], ['createdAt', '<', workload.createdAt]];
          ParseParse.where('Workload', cond, function(workload, workloads2) {
            workload.set('synchro_start', workloads2.length + 1);
            return workload.save();
          }, workload, 1000);
          cond = [['is_done', true], ['createdAt', '>', workload.createdAt], ['createdAt', '<', Util.minAgo(-24, workload.createdAt)]];
          _results.push(ParseParse.where('Workload', cond, function(workload, workloads3) {
            workload.set('synchro_end', workloads3.length + 0);
            return workload.save();
          }, workload, 1000));
        }
        return _results;
      }, null, 30);

      /*
      ParseParse.where("Workload", [['is_done', true]], (workloads) ->
        hash = {}
        arr = []
        res = {}
        html = ""
        for workload in workloads
          if key = workload.get('sc_id')
            key = "soundcloud:#{key}"
          else if key = workload.get('yt_id')
            key = "youtube:#{key}"
          else
            continue
          hash[key] = {number: 0, title: workload.get('title')} unless hash[key]
          hash[key].number += 1
        for key of hash
          item = hash[key]
          item.key = key
          arr.push(item)
         
        arr.sort (a, b) ->
          b.number - a.number
        
        for i in [0..49]
          html += "#{(i + 1)}位：<a href='##{arr[i].key}' class='fixed_start'>#{arr[i].title}</a>(#{arr[i].number}回)<br />"
        console.log html
      , null, 10000000)
       */
    };

    ParseBatch.repeat = function(sec) {
      if (sec == null) {
        sec = 60;
      }
      return this["do"]();
    };

    return ParseBatch;

  })();

  Parse.initialize(this.env.parse_app_id, this.env.parse_key);

  this.ParseParse = (function() {
    function ParseParse() {}

    ParseParse.find = function(model_name, id, callback, instance) {
      var Model, query;
      if (instance == null) {
        instance = null;
      }
      Model = Parse.Object.extend(model_name);
      query = new Parse.Query(Model);
      return query.get(id, {
        success: function(data) {
          if (instance) {
            return callback(instance, data);
          } else {
            return callback(data);
          }
        },
        error: function(object, error) {
          return console.log(error);
        }
      });
    };

    ParseParse.fetch = function(model_name, child, callback) {
      return child.get(model_name).fetch({
        success: function(parent) {
          return callback(child, parent);
        }
      });
    };

    ParseParse.where = function(model_name, cond, callback, instance, limit) {
      var Model, c, query, _i, _len;
      if (instance == null) {
        instance = null;
      }
      if (limit == null) {
        limit = 100;
      }
      Model = Parse.Object.extend(model_name);
      query = new Parse.Query(Model);
      query.limit(limit);
      for (_i = 0, _len = cond.length; _i < _len; _i++) {
        c = cond[_i];
        if (c[2]) {
          if (c[1] === '<') {
            query.lessThan(c[0], c[2]);
          } else if (c[1] === '>') {
            query.greaterThan(c[0], c[2]);
          }
        } else {
          query.equalTo(c[0], c[1]);
        }
      }
      query.descending("createdAt");
      return query.find({
        success: function(data) {
          if (instance) {
            return callback(instance, data);
          } else {
            return callback(data);
          }
        },
        error: function(error) {
          return console.log(error);
        }
      });
    };

    ParseParse.all = function(model_name, callback, params) {
      var Model, query;
      if (params == null) {
        params = {};
      }
      Model = Parse.Object.extend(model_name);
      query = new Parse.Query(Model);
      query.limit(999999);
      query.descending("createdAt");
      return query.find({
        success: function(data) {
          return callback(data);
        }
      });
    };

    ParseParse.find_or_create = function(model_name, key_params, params, callback) {};

    ParseParse.create = function(model_name, params, callback) {
      var Model, key, model, modelACL, val;
      if (callback == null) {
        callback = null;
      }
      Model = Parse.Object.extend(model_name);
      model = new Model();
      for (key in params) {
        val = params[key];
        model.set(key, val);
      }
      if (Parse.User.current()) {
        model.set('user', Parse.User.current());
        modelACL = new Parse.ACL(Parse.User.current());
        modelACL.setPublicReadAccess(true);
        model.setACL(modelACL);
      }
      return model.save(null, {
        error: function(model, error) {
          return console.log(error);
        },
        success: function(model) {
          if (callback) {
            return callback(model);
          }
        }
      });
    };

    ParseParse.addAccesslog = function() {
      console.log('addAccesslog');
      return ParseParse.create('Accesslog', {
        url: location.href
      });
    };

    return ParseParse;

  })();

  this.Ruffnote = (function() {
    function Ruffnote() {}

    Ruffnote.fetch = function(path, name, callback) {
      var cache, is_callback, url;
      if (callback == null) {
        callback = null;
      }
      if (cache = localStorage["ruffnote_" + name]) {
        $("#" + name).html(cache);
        if (callback != null) {
          callback();
        }
      } else {
        is_callback = true;
      }
      url = "https://ruffnote.com/" + path + "/download.json?callback=?";
      return $.getJSON(url, function(data) {
        localStorage["ruffnote_" + name] = data.content;
        $("#" + name).html(data.content);
        if (typeof is_calback !== "undefined" && is_calback !== null) {
          return callback();
        }
      });
    };

    return Ruffnote;

  })();

  this.Soundcloud = (function() {
    function Soundcloud() {}

    Soundcloud.fetch = function(sc_id, client_id, callback) {
      var url;
      url = "//api.soundcloud.com/tracks/" + sc_id + ".json?client_id=" + client_id;
      return $.get(url, function(track) {
        return callback(track);
      });
    };

    Soundcloud.play = function(sc_id, client_id, $dom, is_autoplay) {
      if (is_autoplay == null) {
        is_autoplay = true;
      }
      return $dom.html("<iframe width=\"100%\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?visual=true&url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F" + sc_id + "&show_artwork=true&client_id=" + client_id + "&auto_play=" + (is_autoplay ? 'true' : 'false') + "&t=3000\"></iframe>");
    };

    Soundcloud.search = function(keyword, client_id, $dom, callback) {
      var url;
      if (callback == null) {
        callback = null;
      }
      url = "http://api.soundcloud.com/tracks.json?client_id=" + window.env.sc_client_id + "&q=" + keyword + "&duration[from]=" + (24 * 60 * 1000);
      return $.get(url, function(tracks) {
        var artwork, href, track, _i, _len;
        if (tracks[0]) {
          for (_i = 0, _len = tracks.length; _i < _len; _i++) {
            track = tracks[_i];
            artwork = "<img src=\"https://ruffnote.com/attachments/24162\" width='100px'/>";
            if (track.artwork_url) {
              artwork = "<img src=\"" + track.artwork_url + "\" width='100px'/>";
            }
            href = "soundcloud:" + track.id;
            $dom.append("<div class='col-lg-2' style='min-height: 200px;'>\n  <a href='" + track.permalink_url + "' target='_blank'>" + track.title + "</a>\n  (" + (Util.time(track.duration)) + ")<br />\n  <br />\n  " + artwork + "\n  <a href=\"#" + href + "\" class='fixed_start'><img src='https://ruffnote.com/attachments/24353' /></a>\n  <!--<a href=\"#\" class='add_playlist btn btn-default'>追加</a>-->\n</div>");
          }
          if (callback) {
            return callback();
          }
        } else {
          return $dom.append("<div>「" + q + "」SoundCloudにはで24分前後の曲はまだ出てないようです...。他のキーワードで探してみてください！</div>");
        }
      });
    };

    return Soundcloud;

  })();

  Util = (function() {
    function Util() {}

    Util.minAgo = function(min, date) {
      if (date == null) {
        date = null;
      }
      if (!date) {
        date = new Date();
      }
      return new Date(date.getTime() - min * 60 * 1000);
    };

    Util.scaffolds = function(params) {
      var $body, $item, attr, id, param, _i, _len, _results;
      $body = $('#nc');
      $body.html('');
      _results = [];
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        attr = null;
        if (typeof param === 'object') {
          id = param[0];
          attr = param[1];
          console.log(attr.is_row);
        } else {
          id = param;
        }
        $item = $('<div></div>');
        $item.attr('id', id);
        if (!(attr && attr.is_row === false)) {
          $item.addClass('row');
        }
        if (attr && attr.is_hide === true) {
          $item.hide();
        }
        _results.push($body.append($item));
      }
      return _results;
    };

    Util.time = function(mtime) {
      var day, hour, min, month, sec, time;
      if (mtime < 24 * 3600 * 1000) {
        time = parseInt(mtime / 1000);
        min = parseInt(time / 60);
        if (min > 60) {
          hour = parseInt(min / 60);
          min = min - hour * 60;
          sec = time - hour * 60 * 60 - min * 60;
        } else {
          sec = time - min * 60;
        }
        if (hour) {
          return "" + (Util.zero(hour)) + ":" + (Util.zero(min)) + ":" + (Util.zero(sec));
        } else {
          return "" + (Util.zero(min)) + ":" + (Util.zero(sec));
        }
      } else {
        time = new Date(mtime * 1000);
        month = time.getMonth() + 1;
        day = time.getDate();
        hour = time.getHours();
        min = time.getMinutes();
        return "" + (Util.zero(month)) + "/" + (Util.zero(day)) + " " + (Util.zero(hour)) + ":" + (Util.zero(min));
      }
    };

    Util.monthDay = function(time) {
      var date, day, month;
      date = new Date(time);
      month = date.getMonth() + 1;
      day = date.getDate();
      return "" + (Util.zero(month)) + "月" + (Util.zero(day)) + "日";
    };

    Util.hourMin = function(time) {
      var date, hour, min;
      date = new Date(time);
      hour = date.getHours();
      min = date.getMinutes();
      return "" + (Util.zero(hour)) + ":" + (Util.zero(min));
    };

    Util.zero = function(i) {
      if (i < 0) {
        return "00";
      }
      if (i < 10) {
        return "0" + i;
      } else {
        return "" + i;
      }
    };

    Util.countDown = function(duration, callback, started, params) {
      var $dom, audio, dom, past, remain, remain2;
      if (callback == null) {
        callback = 'reload';
      }
      if (started == null) {
        started = null;
      }
      if (params == null) {
        params = {};
      }
      if (!started) {
        started = (new Date()).getTime();
      }
      past = (new Date()).getTime() - started;
      if (duration > past) {
        remain = duration - past;
        if (remain < 8 * 1000 && remain >= 7 * 1000) {
          audio = document.getElementById("hato");
          if (audio) {
            audio.play();
          }
        }
        remain2 = Util.time(remain);
        if (dom = params.dom) {
          $dom = $(dom);
        } else {
          $('title').html(remain2);
          $dom = $('.countdown');
        }
        $dom.html("あと" + remain2);
        if (callback === 'reload') {
          return setTimeout("Util.countDown(" + duration + ", null, " + started + ", " + (JSON.stringify(params)) + ")", 1000);
        } else {
          return setTimeout("Util.countDown(" + duration + ", " + callback + ", " + started + ", " + (JSON.stringify(params)) + ")", 1000);
        }
      } else {
        if (callback === 'reload') {
          return location.reload();
        } else {
          return callback();
        }
      }
    };

    Util.realtime = function() {
      var $dom, diff, disp, dom, _i, _len, _ref, _results;
      setTimeout("Util.realtime()", 1000);
      _ref = $('.realtime');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dom = _ref[_i];
        $dom = $(dom);
        diff = parseInt($dom.attr('data-countdown')) - (new Date()).getTime();
        disp = Util.time(diff);
        _results.push($(dom).html(disp));
      }
      return _results;
    };

    Util.parseHttp = function(str) {
      return str.replace(/https?:\/\/[\w?=&.\/-;#~%\-+]+(?![\w\s?&.\/;#~%"=\-]*>)/g, function(http) {
        var text;
        text = http;
        if (text.length > 20) {
          text = text.substring(0, 21) + "...";
        }
        return "<a href=\"" + http + "\" target=\"_blank\">" + text + "</a>";
      });
    };

    Util.addButton = function(id, $dom, text, callback, tooltip) {
      var $button;
      if (tooltip == null) {
        tooltip = null;
      }
      $button = $('<input>');
      if (typeof text === 'string') {
        $button.attr('type', 'submit');
        $button.attr('value', text);
        $button.addClass('btn-default');
      } else {
        $button.attr('type', 'image');
        $button.attr('src', text[0]);
        $button.css('border', 'none');
        if (text[1]) {
          $button.attr('onmouseover', "this.src='" + text[1] + "'");
        }
        $button.attr('onmouseout', "this.src='" + text[0] + "'");
      }
      $button.addClass('btn');
      $button.attr('id', id);
      if (tooltip) {
        $button.tooltip({
          title: tooltip
        });
      }
      $dom.append($button);
      return $button.click(function() {
        return callback();
      });
    };

    Util.beforeunload = function(text, flag) {
      return $(window).on("beforeunload", function(e) {
        if (flag && eval(flag)) {
          return text;
        }
      });
    };

    Util.tag = function(tagname, val, attrs) {
      var $tag, attr;
      if (val == null) {
        val = null;
      }
      if (attrs == null) {
        attrs = null;
      }
      if (tagname === 'img') {
        $tag = $("<" + tagname + " />");
        if (val) {
          $tag.attr('src', val);
        }
      } else if (tagname === 'input') {
        $tag = $("<" + tagname + " />");
        if (val) {
          $tag.attr('placeholder', val);
        }
      } else {
        $tag = $("<" + tagname + "></" + tagname + ">");
        if (val) {
          $tag.html(val);
        }
      }
      if (attrs) {
        for (attr in attrs) {
          $tag.attr(attr, attrs[attr]);
        }
      }
      return $tag;
    };

    return Util;

  })();

  window.Util = window.Util || Util;

  this.Youtube = (function() {
    function Youtube() {}

    Youtube.fetch = function(yt_id, callback) {
      var url;
      console.log('youtube', yt_id);
      url = "https://gdata.youtube.com/feeds/api/videos/" + yt_id + "?alt=json";
      return $.get(url, function(track) {
        return callback(track);
      });
    };

    Youtube.play = function(youtube_key, $dom, is_autoplay, start_sec) {
      if (is_autoplay == null) {
        is_autoplay = true;
      }
      if (start_sec == null) {
        start_sec = 0;
      }
      console.log('youtube_key', youtube_key);
      return $dom.html("<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/" + youtube_key + "?autoplay=" + (is_autoplay ? '1' : '0') + "&start=" + start_sec + "\" frameborder=\"0\" allowfullscreen></iframe>");
    };

    Youtube.search = function(keyword, $dom, callback) {
      var url;
      if (callback == null) {
        callback = null;
      }
      url = "http://gdata.youtube.com/feeds/api/videos?q=" + keyword + "&filter=long&alt=json";
      return $.get(url, function(tracks) {
        var artwork, artwork_url, duration, href, id, title, tmp, track, _i, _len;
        tracks = tracks.feed.entry;
        if (tracks[0]) {
          for (_i = 0, _len = tracks.length; _i < _len; _i++) {
            track = tracks[_i];
            duration = parseInt(track['media$group']['yt$duration']['seconds']) * 1000;
            if (duration < 24 * 60 * 1000) {
              continue;
            }
            tmp = track['id']['$t'];
            id = tmp.split("/")[tmp.split("/").length - 1];
            url = "https://www.youtube.com/watch?v=" + id;
            title = track['title']['$t'];
            artwork_url = track['media$group']['media$thumbnail'][3]['url'];
            duration = parseInt(track['media$group']['yt$duration']['seconds']) * 1000;
            artwork = "<img src=\"https://ruffnote.com/attachments/24162\" width='100px'/>";
            if (artwork_url) {
              artwork = "<img src=\"" + artwork_url + "\" width='100px'/>";
            }
            href = "youtube:" + id;
            $dom.append("<div class='col-lg-2' style='min-height: 200px;'>\n  <a href='" + url + "' target='_blank'>" + title + "</a>\n  (" + (Util.time(duration)) + ")<br />\n  <br />\n  " + artwork + "\n  <a href=\"#" + href + "\" class='fixed_start'><img src='https://ruffnote.com/attachments/24353' /></a>\n  <!--<a href=\"#\" class='add_playlist btn btn-default'>追加</a>-->\n</div>");
          }
          if (callback) {
            return callback();
          }
        } else {
          return $dom.append("<div>「" + q + "」YouTubeCloudにはで24分前後の曲はまだ出てないようです...。他のキーワードで探してみてください！</div>");
        }
      });
    };

    return Youtube;

  })();

  this.env.is_doing = false;

  $(function() {
    var service, _i, _len, _ref;
    ParseParse.all("User", function(users) {
      var img, user, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        img = user.get('icon_url');
        if (img) {
          localStorage["icon_" + user.id] = img;
        }
        _results.push($(".icon_" + user.id).attr('src', img));
      }
      return _results;
    });
    ParseParse.addAccesslog();
    Util.scaffolds([
      [
        'header', {
          is_row: false
        }
      ], [
        'otukare', {
          is_hide: true
        }
      ], 'ad', 'review', 'contents', 'memo_title', 'memo', 'doing_title', 'doing', 'chatting_title', 'chatting', 'nextkakuhen_title', 'nextkakuhen', 'done', 'you_title', 'you', 'ranking_title', 'ranking', '8tracks_title', '8tracks', 'search_title', 'search', 'playing', 'complete', 'select_rooms', 'rooms', 'kpi_title', 'kpi3_title', 'kpi3', 'kpi2_title', 'kpi2', 'kpi1_title', 'kpi1', [
        'whatis', {
          is_row: false
        }
      ], 'footer', [
        'otukare_services', {
          is_hide: true
        }
      ], 'hatopoppo'
    ]);
    Util.realtime();
    ruffnote(13475, 'header', initStart);
    ruffnote(13477, 'footer');
    ruffnote(17758, 'search_title');
    ruffnote(17762, 'ranking_title');
    ruffnote(17498, 'otukare');
    window.services = [['ingress', 'https://www.ingress.com/intel'], ['togetter', 'http://togetter.com/'], ['newspicks', 'https://newspicks.com/top-news'], ['itoicom', 'http://www.1101.com/home.html']];
    $('#selectRoomButton').hide();
    _ref = window.services;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      service = _ref[_i];
      if (location.href.match("" + service[0] + "=")) {
        initService($('#otukare_services'), service[1]);
      }
    }
    ruffnote(17661, 'music_ranking');
    initSearch();
    init8tracks();
    initChatting();
    initDoing();
    initDone();
    initRanking();
    initFixedStart();
    ParseBatch.repeat();
    initHatopoppo();
    initWhatis();
    if (location.href.match(/memo=/)) {
      initMemo();
    }
    initYou();
    return initNextkakuhen();
  });

  init8tracks = function() {
    ruffnote(17763, '8tracks_title');
    return EightTracks.attrip($('#8tracks'));
  };

  initStart = function() {
    var $before, $review, attrs, id, text, tooltip;
    console.log('initStart');
    $("#header img").css('height', '320px');
    $("#header img").animate({
      height: "340px"
    }, 5000, function() {
      return console.log('Animation complete.');
    });
    if (location.href.match(/sparta/)) {
      Util.countDown(1 * 60 * 1000, start_unless_doing);
    }
    text = "24分やり直しでも大丈夫ですか？";
    Util.beforeunload(text, 'env.is_doing');
    if (Parse.User.current()) {
      $('#contents').append("<div class='countdown' ></div>");
      $('#contents').append("<br>");
      $('#contents').append("<div id='fixedstart_artwork'></div>");
      $('#contents').append("<div id='start_buttons'></div>");
      $('#contents .fixedstart_button').hide();
      text = ['https://ruffnote.com/attachments/24347', 'https://ruffnote.com/attachments/24348'];
      tooltip = '現在はSoundcloudの人気曲からランダム再生ですが今後もっと賢くなっていくはず';
      Util.addButton('start', $('#contents #start_buttons'), text, start_random, tooltip);
      $('#contents #start_buttons').append("<span id='fixedstart_button'></span>");
      $('#fixedstart_button').hide();
      text = ['https://ruffnote.com/attachments/24353', 'https://ruffnote.com/attachments/24354'];
      Util.addButton('start', $('#fixedstart_button'), text, start_hash);
      id = location.hash.split(':')[1];
      if (location.hash.match(/soundcloud/)) {
        Soundcloud.fetch(id, this.env.sc_client_id, function(track) {
          var artwork_url;
          artwork_url = artworkUrlWithNoimage(track['artwork_url']);
          text = "<h5>" + track['title'] + "</h5><img src='" + artwork_url + "'>";
          return $('#contents #fixedstart_artwork').append(text);
        });
        $('#contents #fixedstart_button').fadeIn();
      }
      if (location.hash.match(/youtube/)) {
        Youtube.fetch(id, function(track) {
          var artwork_url;
          artwork_url = artworkUrlWithNoimage(track['entry']['media$group']['media$thumbnail'][3]['url']);
          text = "<h5>" + track['entry']['title']['$t'] + "</h5><img src='" + artwork_url + "'>";
          return $('#contents #fixedstart_artwork').append(text);
        });
        $('#contents #fixedstart_button').fadeIn();
      }
      if (location.hash.match(/mixcloud/)) {
        Mixcloud.fetch(id, function(track) {
          var artwork_url;
          artwork_url = artworkUrlWithNoimage(track.pictures.medium);
          text = "<h5>" + track.name + "</h5><img src='" + artwork_url + "'>";
          return $('#contents #fixedstart_artwork').append(text);
        });
        $('#contents #fixedstart_button').fadeIn();
      }
      if (location.hash.match(/8tracks/)) {
        EightTracks.fetch(id, this.env.et_client_id, function(track) {
          var artwork_url;
          artwork_url = artworkUrlWithNoimage(track.mix.cover_urls.sq100);
          text = "<h5>" + track.mix.name + "</h5><img src='" + artwork_url + "'>";
          return $('#contents #fixedstart_artwork').append(text);
        });
        $('#contents #fixedstart_button').fadeIn();
      }
      text = ['https://ruffnote.com/attachments/24349', 'https://ruffnote.com/attachments/24350'];
      tooltip = '無音ですが終了直前にはとぽっぽが鳴ります';
      Util.addButton('start', $('#contents #start_buttons'), text, start_nomusic, tooltip);
      if (location.href.match('review=')) {
        attrs = {
          id: 'input_review_before',
          style: 'margin:0 auto; width: 100%;'
        };
        $before = Util.tag('input', "今から24分間集中するにあたって一言（公開されます） 例：24分で企画書のたたき台を作る！", attrs);
        console.log('before', $before);
        $review = Util.tag('div', $before, {
          style: 'text-align: center;'
        });
        return $('#contents').append($review);
      }
    } else {
      text = 'facebookログイン';
      return Util.addButton('login', $('#contents'), text, login);
    }
  };

  initSearch = function() {
    var $track, $tracks;
    $track = $("<input />").attr('id', 'track').attr('placeholder', 'ここにアーティスト名や曲名を入れてね');
    if (!localStorage['search_music_title']) {
      localStorage['search_music_title'] = '作業BGM';
    }
    $tracks = $("<div></div>").attr('id', 'tracks');
    $('#search').append($track);
    $('#search').append($tracks);
    $('#search input').focus(function() {
      return $(this).select();
    });
    $('#search input').focus();
    return $('#track').keypress(function(e) {
      if (e.which === 13) {
        return searchMusics();
      }
    });
  };

  this.initSelectRooms = function() {
    console.log('initSelectRooms');
    $('#select_rooms').html(Util.tag('div', null, {
      "class": 'imgs'
    }));
    $('#select_rooms').append(Util.tag('select', null, {
      "class": 'col-sm-12'
    }));
    $('#select_rooms select').html('');
    $('#select_rooms select').css('display', 'block');
    return ParseParse.all("Room", function(rooms) {
      var $img, off2, on2, r, room, room_id, total_count, unread_count, _i, _len;
      $('#select_rooms .imgs').html('');
      on2 = 'https://ruffnote.com/attachments/24831';
      off2 = 'https://ruffnote.com/attachments/24832';
      $img = Util.tag('img', on2);
      $img.attr('data-values', "default:いつもの部屋");
      $img.tooltip({
        title: 'いつもの部屋はログが流れやすいよ'
      });
      $img.addClass('col-sm-2 room_icon');
      $img.addClass('on');
      $img.css('cursor', 'pointer');
      $img.attr('data-on', "" + on2);
      $img.attr('data-off', "" + off2);
      $('#select_rooms .imgs').append($img);
      $('.modal-body').html('');
      for (_i = 0, _len = rooms.length; _i < _len; _i++) {
        room = rooms[_i];
        r = room.attributes;
        room_id = room.id;
        total_count = r.comments_count;
        unread_count = getUnreadsCount(room.id, total_count);
        if (r.img_on) {
          on2 = r.img_on;
          off2 = r.img_off;
          $img = Util.tag('img', off2);
          $img.attr('data-values', "" + room_id + ":" + r.title);
          $img.tooltip({
            title: "未読数：" + unread_count + " / 投稿数：" + total_count
          });
          $img.addClass('col-sm-2 room_icon');
          $img.css('cursor', 'pointer');
          $img.attr('data-on', "" + on2);
          $img.attr('data-off', "" + off2);
          $('#select_rooms .imgs').append($img);
        } else {
          $('.modal-body').append("<a class='room_icon' style='cursor: pointer; display:block;'  data-values=\"" + room.id + ":" + room.attributes.title + "\">" + room.attributes.title + " (" + unread_count + "/" + total_count + ")</option>");
        }
      }
      on2 = 'https://ruffnote.com/attachments/24855';
      off2 = 'https://ruffnote.com/attachments/24854';
      $img = Util.tag('img', off2);
      $img.tooltip({
        title: 'その他の部屋を見たい場合はここをクリックしてね'
      });
      $img.addClass('col-sm-2');
      $img.addClass('sonota');
      $img.css('cursor', 'pointer');
      $img.attr('data-toggle', 'modal');
      $img.attr('data-target', '#selectRoomModal');
      $img.attr('data-on', "" + on2);
      $img.attr('data-off', "" + off2);
      $('#select_rooms .imgs').append($img);
      $(document).on('change', "#select_rooms select", function() {
        var vals;
        vals = $(this).val().split(':');
        return initRoom(vals[0], vals[1]);
      });
      $(document).on('click', ".room_icon", function() {
        var $self, i, vals, _j, _len1, _ref;
        _ref = $('.on');
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          i = _ref[_j];
          $(i).attr('src', $(i).attr('data-off'));
          $(i).removeClass('on');
        }
        $self = $(this);
        $self.addClass('on');
        $self.attr('src', $self.attr('data-on'));
        vals = $self.attr('data-values').split(':');
        initRoom(vals[0], vals[1]);
        return $('.modal-header .close').click();
      });
      $(document).on('mouseover', ".room_icon, .sonota", function() {
        var $self;
        $self = $(this);
        return $self.attr('src', $self.attr('data-on'));
      });
      $(document).on('mouseout', ".room_icon, .sonota", function() {
        var $self;
        $self = $(this);
        console.log($self);
        console.log($self.hasClass('on'));
        console.log($self.attr('data-off'));
        if (!$self.hasClass('on')) {
          return $self.attr('src', $self.attr('data-off'));
        }
      });
      return $(document).on('click', "img.sonota", function() {
        return $('#selectRoomButton').click();
      });
    });
  };

  initChatting = function() {
    var cond;
    console.log('initChatting');
    $("#chatting_title").html("<h2 class='status'><img src='https://ruffnote.com/attachments/24306' /></h2>");
    cond = [["is_done", true], ["createdAt", '>', Util.minAgo(this.env.pomotime + this.env.chattime)], ["createdAt", '<', Util.minAgo(this.env.pomotime)]];
    $("#chatting_title").hide();
    return ParseParse.where("Workload", cond, function(workloads) {
      var i, workload, _i, _len;
      if (!(workloads.length > 0)) {
        return;
      }
      $("#chatting_title").show();
      for (i = _i = 0, _len = workloads.length; _i < _len; i = ++_i) {
        workload = workloads[i];
        if (!workload.attributes.user) {
          continue;
        }
        this.addChatting(workload);
      }
      renderWorkloads('#chatting');
      return renderWorkloads('#doing');
    });
  };

  initDoing = function() {
    var cond;
    console.log('initDoing');
    $("#doing_title").html("<h2 class='status'><img src='https://ruffnote.com/attachments/24310' /></h2>");
    $("#doing_title").hide();
    cond = [["is_done", null], ["createdAt", '>', Util.minAgo(this.env.pomotime)]];
    return ParseParse.where("Workload", cond, function(workloads) {
      var i, user_count, user_keys, workload, _i, _len;
      if (!(workloads.length > 0)) {
        return;
      }
      $("#doing_title").show();
      user_keys = {};
      user_count = 0;
      for (i = _i = 0, _len = workloads.length; _i < _len; i = ++_i) {
        workload = workloads[i];
        if (!workload.attributes.user) {
          continue;
        }
        if (!user_keys[workload.attributes.user.id]) {
          this.addDoing(workload);
          user_keys[workload.attributes.user.id] = true;
        }
      }
      return renderWorkloads('#doing');
    });
  };

  initDone = function() {
    var cond;
    console.log('initDone');
    cond = [["is_done", true], ["createdAt", '<', Util.minAgo(this.env.pomotime + this.env.chattime)]];
    return ParseParse.where("Workload", cond, function(workloads) {
      var disp, workload, _i, _len, _results;
      if (!(workloads.length > 0)) {
        return;
      }
      $("#done").append("<h2 class='status'><img src='https://ruffnote.com/attachments/24305' /></h2>");
      _results = [];
      for (_i = 0, _len = workloads.length; _i < _len; _i++) {
        workload = workloads[_i];
        if (!workload.attributes.user) {
          continue;
        }
        disp = "" + (Util.hourMin(workload.createdAt)) + "開始（" + workload.attributes.number + "回目）";
        _results.push(this.addWorkload("#done", workload, disp));
      }
      return _results;
    }, null, 12);
  };

  initKpi = function() {
    var cond;
    ruffnote(17548, 'kpi_title');
    $('#kpi3').css('height', '300px');
    $('#kpi2').css('height', '300px');
    $('#kpi1').css('height', '300px');
    $('#kpi3_title').html('<h2>直近50回分</h2>');
    $('#kpi2_title').html('<h2>直近300回分</h2>');
    $('#kpi1_title').html("<h2 style='margin-top: 30px;'>直近1000回分</h2>");
    cond = [['is_done', true]];
    return ParseParse.where('Workload', cond, function(workloads) {
      var chart1, chart2, chart3, chart_viewer1, chart_viewer2, chart_viewer3, data1, data2, data3, i, key_end, key_start, val_end, val_start, workload, _i, _len;
      chart1 = {};
      chart_viewer1 = {};
      chart2 = {};
      chart_viewer2 = {};
      chart3 = {};
      chart_viewer3 = {};
      for (i = _i = 0, _len = workloads.length; _i < _len; i = ++_i) {
        workload = workloads[i];
        if (!workload.get('synchro_start')) {
          continue;
        }
        key_start = workload.createdAt;
        val_start = workload.get('synchro_start');
        key_end = Util.minAgo(-1 * this.env.pomotime, workload.createdAt);
        val_end = workload.get('synchro_end');
        if (workload.get('user') && Parse.User.current() && workload.get('user').id === Parse.User.current().id) {
          chart_viewer1[key_start] = val_start;
          chart_viewer1[key_end] = val_end;
        }
        chart1[key_start] = val_start;
        chart1[key_end] = val_end;
        if (i > 300) {
          continue;
        }
        if (workload.get('user') && Parse.User.current() && workload.get('user').id === Parse.User.current().id) {
          chart_viewer2[key_start] = val_start;
          chart_viewer2[key_end] = val_end;
        }
        chart2[key_start] = val_start;
        chart2[key_end] = val_end;
        if (i > 50) {
          continue;
        }
        if (workload.get('user') && Parse.User.current() && workload.get('user').id === Parse.User.current().id) {
          chart_viewer3[key_start] = val_start;
          chart_viewer3[key_end] = val_end;
        }
        chart3[key_start] = val_start;
        chart3[key_end] = val_end;
      }
      data1 = [
        {
          name: '全体',
          data: chart1
        }, {
          name: 'あなた',
          data: chart_viewer1
        }
      ];
      new Chartkick.LineChart("kpi1", data1);
      data2 = [
        {
          name: '全体',
          data: chart2
        }, {
          name: 'あなた',
          data: chart_viewer2
        }
      ];
      new Chartkick.LineChart("kpi2", data2);
      data3 = [
        {
          name: '全体',
          data: chart3
        }, {
          name: 'あなた',
          data: chart_viewer3
        }
      ];
      return new Chartkick.LineChart("kpi3", data3);
    }, null, 1000);
  };

  login = function() {
    console.log('login');
    return window.fbAsyncInit();
  };

  start_random = function() {
    console.log('start_random');
    return ParseParse.all("Music", function(musics) {
      var n, sc_id;
      n = Math.floor(Math.random() * musics.length);
      sc_id = musics[n].attributes.sc_id;
      location.hash = "soundcloud:" + sc_id;
      return window.play("soundcloud:" + sc_id);
    });
  };

  window.start_hash = function(key) {
    if (key == null) {
      key = null;
    }
    console.log('start_hash');
    if (!key) {
      key = location.hash.replace(/#/, '');
    }
    if (key) {
      return window.play(key);
    } else {
      return start_nomusic();
    }
  };

  window.start_nomusic = function() {
    console.log('start_nomusic');
    return createWorkload({}, start);
  };

  createWorkload = function(params, callback) {
    var memo;
    if (params == null) {
      params = {};
    }
    params.host = location.host;
    if (location.href.match('review=')) {
      if (location.href.match('sparta=')) {
        memo = prompt("今から24分間集中するにあたって一言（公開されます）", '24分間頑張るぞ！');
      } else {
        memo = $('#input_review_before').val();
      }
      if (memo.length) {
        params['review_before'] = memo;
      }
    }
    return ParseParse.create("Workload", params, function(workload) {
      this.workload = workload;
      return callback();
    });
  };

  start = function() {
    var dom, doms, _i, _len;
    console.log('start');
    $("#done").hide();
    $("#search").hide();
    $("input").hide();
    $(".fixed_start").hide();
    $("#music_ranking").hide();
    doms = ['kpi_title', 'kpi3_title', 'kpi3', 'kpi2_title', 'kpi2', 'kpi1_title', 'kpi1', 'start_buttons', 'fixedstart_artwork', '8tracks', '8tracks_title', 'search_title', 'ranking_title', 'ranking', 'whatis', 'you_title', 'you'];
    for (_i = 0, _len = doms.length; _i < _len; _i++) {
      dom = doms[_i];
      $("#" + dom).hide();
    }
    this.env.is_doing = true;
    this.syncWorkload('doing');
    if (this.env.is_kakuhen) {
      initComments();
      this.initSelectRooms();
    }
    return Util.countDown(this.env.pomotime * 60 * 1000, complete);
  };

  window.play = function(key) {
    var id, params;
    console.log('play', key);
    params = {};
    id = key.split(':')[1];
    if (key.match(/^soundcloud/)) {
      Soundcloud.fetch(id, this.env.sc_client_id, function(track) {
        var k, _i, _len, _ref;
        params['sc_id'] = parseInt(id);
        _ref = ['title', 'artwork_url'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          params[k] = track[k];
        }
        createWorkload(params, start);
        return window.play_repeat(key, track.duration);
      });
    } else if (key.match(/^youtube/)) {
      Youtube.fetch(id, function(track) {
        var sec, start_sec;
        params['yt_id'] = id;
        params['title'] = track['entry']['title']['$t'];
        params['artwork_url'] = track['entry']['media$group']['media$thumbnail'][3]['url'];
        createWorkload(params, start);
        sec = track['entry']['media$group']['yt$duration']['seconds'];
        sec = parseInt(sec);
        if (sec > 24 * 60) {
          start_sec = sec - 24 * 60;
          return Youtube.play(id, $("#playing"), true, start_sec);
        } else {
          return window.play_repeat(key, sec * 1000);
        }
      });
    } else if (key.match(/^mixcloud/)) {
      Mixcloud.fetch(id, function(track) {
        params['mc_id'] = id;
        params['title'] = track.name;
        params['artwork_url'] = track.pictures.medium;
        createWorkload(params, start);
        if (track.audio_length > 24 * 60) {
          return Mixcloud.play(id, $("#playing"), true);
        } else {
          return window.play_repeat(key, track.audio_length * 1000);
        }
      });
    }
    if (key.match(/^8tracks/)) {
      return EightTracks.fetch(id, this.env.et_client_id, function(track) {
        params['et_id'] = parseInt(id);
        params.title = track.mix.name;
        params.artwork_url = track.mix.cover_urls.sq100;
        createWorkload(params, start);
        return window.play_repeat(key, track.mix.duration * 1000);
      });
    }
  };

  window.play_repeat = function(key, duration) {
    var id;
    console.log('play_repeat');
    if (this.env.is_done) {
      return false;
    }
    id = key.split(':')[1];
    if (key.match(/^soundcloud/)) {
      Soundcloud.play(id, this.env.sc_client_id, $("#playing"));
    } else if (key.match(/^youtube/)) {
      Youtube.play(id, $("#playing"));
    } else if (key.match(/^mixcloud/)) {
      Mixcloud.play(id, $("#playing"));
    } else if (key.match(/^8tracks/)) {
      EightTracks.play(id, $("#playing"));
    }
    return setTimeout("play_repeat\(\"" + key + "\"\, " + duration + ")", duration);
  };

  complete = function() {
    var $complete, cond, first, w, workload;
    console.log('complete');
    this.syncWorkload('chatting');
    console.log('aaa');
    Util.countDown(this.env.chattime * 60 * 1000, 'finish');
    $('#header').hide();
    $('#otukare').fadeIn();
    $("#otukare_services").fadeIn();
    $("#playing").fadeOut();
    $("#search").fadeOut();
    $("#playing").html('');
    if (!this.env.is_kakuhen) {
      this.initSelectRooms();
    }
    if (!this.env.is_done) {
      if (location.href.match('alert')) {
        alert('24分間お疲れ様でした！5分間交換日記ができます☆');
      }
    }
    this.env.is_doing = false;
    this.env.is_done = true;
    if (location.href.match("ad=") && !$('#ad iframe').length) {
      ParseParse.all("Ad", function(ads) {
        var ad, n;
        n = Math.floor(Math.random() * ads.length);
        ad = ads[n].attributes;
        return $('#ad').html("<h2><a href=\"" + ad.click_url + "?from=245cloud.com\" target=\"_blank\">" + ad.name + "</a></h2>\n<iframe width=\"560\" height=\"315\" src=\"" + ad.movie_url + "\" frameborder=\"0\" allowfullscreen></iframe>");
      });
    }
    workload = this.workload;
    w = workload.attributes;
    first = new Date(workload.createdAt);
    first = first.getTime() - first.getHours() * 60 * 60 * 1000 - first.getMinutes() * 60 * 1000 - first.getSeconds() * 1000;
    first = new Date(first);
    cond = [["is_done", true], ['user', w.user], ["createdAt", '<', workload.createdAt], ["createdAt", '>', first]];
    ParseParse.where("Workload", cond, function(workload, data) {
      workload.set('number', data.length + 1);
      workload.set('is_done', true);
      return workload.save();
    }, workload);
    cond = [['createdAt', '>', Util.minAgo(this.env.pomotime, workload.createdAt)], ['createdAt', '<', workload.createdAt]];
    ParseParse.where('Workload', cond, function(workload, workloads2) {
      workload.set('synchro_start', workloads2.length + 1);
      return workload.save();
    }, workload, 99999);
    cond = [['createdAt', '>', workload.createdAt], ['createdAt', '<', Util.minAgo(-1 * this.env.pomotime, workload.createdAt)]];
    ParseParse.where('Workload', cond, function(workload, workloads3) {
      workload.set('synchro_end', workloads3.length + 0);
      return workload.save();
    }, workload, 9999);
    $complete = $('#complete');
    $complete.html('24分おつかれさまでした！5分間交換ノートが見られます');
    if (location.href.match('review=')) {
      initReview();
    }
    return initComments();
  };

  window.initReview = function() {
    var $after, $point, $review, $submit, attrs, i, options, titles, _i;
    attrs = {
      id: 'input_review_point',
      style: 'margin:0 auto;'
    };
    titles = {
      1: '全然集中できなかった',
      2: '集中できなかった',
      3: '普通に集中できた',
      4: '結構集中できた',
      5: 'かなり集中できた'
    };
    options = '<option value="">自己評価（1〜5）を選択してください</option>';
    for (i = _i = 1; _i <= 5; i = ++_i) {
      options += "<option value=\"" + i + "\">" + titles[i] + "</option>";
    }
    $point = Util.tag('select', options, attrs);
    $review = Util.tag('div', $point, {
      style: 'text-align: center;'
    });
    $('#review').append($review);
    attrs = {
      id: 'input_review_after',
      style: 'margin:0 auto; width: 100%;'
    };
    $after = Util.tag('input', '終わってからの感想（公開されます） 例：あんまり集中できなかった', attrs);
    $review = Util.tag('div', $after, {
      style: 'text-align: center;'
    });
    $('#review').append($review);
    attrs = {
      id: 'input_review_submit',
      style: 'margin:0 auto;',
      type: 'submit',
      value: 'レビューを保存'
    };
    $submit = Util.tag('input', null, attrs);
    $review = Util.tag('div', $submit, {
      style: 'text-align: center;'
    });
    $('#review').append($review);
    return $(document).on('click', '#input_review_submit', function() {
      workload.set('point', parseInt($('#input_review_point').val()));
      workload.set('review_after', $('#input_review_after').val());
      workload.save();
      return alert('レビューを保存しました');
    });
  };

  window.initComments = function() {
    return initRoom();
  };

  window.initRoom = function(id, title) {
    var $comments, $createComment, $room, limit, search_id;
    if (id == null) {
      id = 'default';
    }
    if (title == null) {
      title = 'いつもの部屋';
    }
    console.log('initRoom');
    $(".room").hide();
    $room = $("#room_" + id);
    if ($room.length) {
      return $room.show();
    } else {
      $room = $('<div></div>');
      $room.addClass('room');
      $room.attr('id', "room_" + id);
      $createComment = $('<input />').addClass('create_comment').attr('placeholder', "「" + title + "」に書き込む");
      $room.append($createComment);
      $comments = $("<table></table>").addClass('table comments');
      $room.append($comments);
      $('#rooms').append($room);
      if (id === 'default') {
        search_id = null;
        limit = 100;
      } else {
        search_id = id;
        limit = 10000;
      }
      return ParseParse.where("Comment", [['room_id', search_id]], function(comments) {
        var comment, unreads, _i, _len;
        $("#room_" + id + " .create_comment").keypress(function(e) {
          if (e.which === 13) {
            return window.createComment(id);
          }
        });
        for (_i = 0, _len = comments.length; _i < _len; _i++) {
          comment = comments[_i];
          this.addComment(id, comment);
        }
        unreads = Parse.User.current().get("unreads");
        if (!unreads) {
          unreads = {};
        }
        unreads[search_id] = comments.length;
        Parse.User.current().set("unreads", unreads);
        return Parse.User.current().save();
      }, null, limit);
    }
  };

  window.finish = function() {
    console.log('finish');
    this.syncWorkload('finish');
    return location.reload();
  };

  window.createComment = function(room_id) {
    var $createComment, body, params;
    console.log('createComment');
    console.log('room_id', room_id);
    $createComment = $("#room_" + room_id + " .create_comment");
    body = $createComment.val();
    $createComment.val('');
    if (body.length < 1) {
      return;
    }
    params = {
      body: body
    };
    if (room_id !== 'default') {
      params.room_id = room_id;
    }

    /*
    fileUploadControl = $file[0]
    if fileUploadControl.files.length > 0
      file = fileUploadControl.files[0]
       *FIXME
      filename = 'commentfile' + file.name.split(/./).pop()
    
      parseFile = new Parse.File(filename, file)
      parseFile.save((file) ->
        console.log file
        params['file'] = file
        ParseParse.create('Comment', params, (comment)->
          $file.val(null)
          syncComment(room_id, comment)
        )
      , (error) ->
         * error handling
      )
    else
      ParseParse.create('Comment', params, (comment)->
        syncComment(room_id, comment)
      )
     */
    return ParseParse.create('Comment', params, function(comment) {
      return syncComment(room_id, comment, true);
    });
  };

  initRanking = function() {
    return $('#ranking').html('ここにランキング結果が入る予定');
  };

  this.addDoing = function(workload) {
    var disp, end_time, t;
    $("#doing_title").show();
    t = new Date(workload.createdAt);
    end_time = this.env.pomotime * 60 * 1000 + t.getTime();
    disp = "" + (Util.hourMin(workload.createdAt)) + "開始（あと<span class='realtime' data-countdown='" + end_time + "'></span>）";
    return this.addWorkload("#doing", workload, disp);
  };

  this.addChatting = function(workload) {
    var disp, end_time, t;
    $("#chatting_title").show();
    t = new Date(workload.createdAt);
    end_time = this.env.pomotime * 60 * 1000 + this.env.chattime * 60 * 1000 + t.getTime();
    disp = "" + (Util.hourMin(workload.createdAt)) + "開始（あと<span class='realtime' data-countdown='" + end_time + "'></span>）";
    return this.addWorkload("#chatting", workload, disp);
  };

  this.addWorkload = function(dom, workload, disp) {
    var $item, $workload, fixed, href, i, jacket, review, stars, title, user_id, user_img, w, _i, _j, _ref, _ref1;
    if (workload.attributes) {
      w = workload.attributes;
      user_id = w.user.id;
    } else {
      w = workload;
      user_id = w.user.objectId;
    }
    review = "";
    stars = "";
    if (location.href.match('review=')) {
      if (w.review_before) {
        review += "<div class=\"review\">【前】" + w.review_before + "</div>";
      }
      if (w.review_after) {
        review += "<div class=\"review\">【後】" + w.review_after + "</div>";
      }
      if (w.point) {
        if (w.point < 5) {
          for (i = _i = 1, _ref = 5 - w.point; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            stars += "☆";
          }
        }
        for (i = _j = 1, _ref1 = w.point; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          stars += "★";
        }
      }
    }
    if (w.title) {
      href = '#';
      if (w.sc_id) {
        href += "soundcloud:" + w.sc_id;
      }
      if (w.yt_id) {
        href += "youtube:" + w.yt_id;
      }
      if (w.mc_id) {
        href += "mixcloud:" + w.mc_id;
      }
      if (w.et_id) {
        href += "8tracks:" + w.et_id;
      }
      fixed = "<a href=\"" + href + "\" class='fixed_start'><img src='https://ruffnote.com/attachments/24327' /></a>";
      jacket = "" + (w.artwork_url ? '<img src=\"' + w.artwork_url + '\" />' : '<img src=\"https://ruffnote.com/attachments/24162\" />');
      title = w.title;
    } else {
      title = '無音';
      fixed = "<a href=\"#\" class='fixed_start'><img src='https://ruffnote.com/attachments/24333' /></a>";
      jacket = "<img src=\"https://ruffnote.com/attachments/24163\" />";
    }
    user_img = "<img class='icon icon_" + user_id + " img-thumbnail' src='" + (userIdToIconUrl(user_id)) + "' />";
    $item = $("<h5>" + title + " </h5>\n<div>" + jacket + "</div>\n<div style='margin: 8px 0 5px;'>" + user_img + "</div>\n<div>" + disp + "</div>\n<div>" + fixed + "</div>\n<div>" + stars + "</div>\n<div>" + review + "</div>");
    if (dom !== '#done') {
      $("#chatting .user_" + user_id).remove();
      $("#doing .user_" + user_id).remove();
    }
    if ((dom === '#doing' || dom === '#chatting') && $("" + dom + " .user_" + user_id).length) {
      $("" + dom + " .user_" + user_id).html($item);
    } else {
      $workload = $('<div></div>');
      $workload.addClass("user_" + user_id);
      $workload.addClass("workload");
      $workload.addClass("col-sm-2");
      $workload.css("min-height", '280px');
      $workload.html($item);
      if (workload.attributes) {
        $("" + dom).append($workload);
      } else {
        $("" + dom).prepend($workload);
        renderWorkloads('#doing');
        renderWorkloads('#chatting');
      }
    }
    if (this.env.is_doing) {
      $(".fixed_start").hide();
    }
    $("" + dom).hide();
    return $("" + dom).fadeIn();
  };

  initFixedStart = function() {
    $(document).on('click', '.fixed_start', function() {
      var hash;
      if (Parse.User.current()) {
        hash = $(this).attr('href').replace(/^#/, '');
        location.hash = hash;
        return start_hash();
      } else {
        return alert('Facebookログインをお願いします！');
      }
    });
    return $(document).on('click', '.add_playlist', function() {
      return alert('プレイリストに追加する機能は現在開発中です。。。');
    });
  };

  ruffnote = function(id, dom, callback) {
    if (callback == null) {
      callback = null;
    }
    return Ruffnote.fetch("pandeiro245/245cloud/" + id, dom, callback);
  };

  initService = function($dom, url) {
    return $dom.append("<iframe src='" + url + "' width='85%' height='900px'></iframe>");
  };

  this.addComment = function(id, comment, is_countup) {
    var $comments, c, file, hour, html, min, t, unreads, user;
    if (is_countup == null) {
      is_countup = false;
    }
    $comments = $("#room_" + id + " .comments");
    if (typeof comment.attributes !== 'undefined') {
      c = comment.attributes;
    } else {
      c = comment;
    }
    user = c.user;
    t = new Date(comment.createdAt);
    hour = t.getHours();
    min = t.getMinutes();
    if (user && c.body) {
      if (this.env.is_done) {
        unreads = Parse.User.current().get("unreads");
        if (!unreads) {
          unreads = {};
          unreads[id] = 0;
        }
        unreads[id] += 1;
        Parse.User.current().set("unreads", unreads);
        Parse.User.current().save();
      }
      if (c.file) {
        console.log(c.file);
        file = "<img src=\"" + c.file._url + "\" style='max-width: 500px;'/>";
      } else {
        file = "";
      }
      html = "<tr>\n<td>\n<a class='facebook_" + user.id + "' target='_blank'>\n<img class='icon icon_" + user.id + "' src='" + (userIdToIconUrl(c.user.objectId)) + "' />\n<div class='facebook_name_" + user.id + "'></div>\n</a>\n<td>\n<td>" + (Util.parseHttp(c.body)) + file + "</td>\n<td>" + hour + "時" + min + "分</td>\n</tr>";
      if (typeof comment.attributes !== 'undefined') {
        $comments.append(html);
        return ParseParse.fetch("user", comment, function(ent, user) {
          var href, img, name;
          img = user.get('icon_url') || user.get('icon')._url;
          $(".icon_" + user.id).attr('src', img);
          if (user.get('facebook_id_str')) {
            href = "https://facebook.com/" + (user.get('facebook_id_str'));
            $(".facebook_" + user.id).attr('href', href);
          }
          if (name = user.get('name')) {
            return $(".facebook_name_" + user.id).html(name);
          }
        });
      } else {
        return $comments.prepend(html);
      }
    }
  };

  userIdToIconUrl = function(userId) {
    return localStorage["icon_" + userId] || "";
  };

  getUnreadsCount = function(room_id, total_count) {
    var count, res;
    if (!Parse.User.current()) {
      return total_count;
    }
    if (!Parse.User.current().get("unreads")) {
      return total_count;
    }
    if (count = Parse.User.current().get("unreads")[room_id]) {
      res = total_count - count;
      if (res < 0) {
        return 0;
      } else {
        return res;
      }
    } else {
      return total_count;
    }
  };

  this.syncWorkload = function(type) {
    return this.socket.push({
      type: type,
      workload: this.workload
    });
  };

  syncComment = function(id, comment, is_countup) {
    if (is_countup == null) {
      is_countup = false;
    }
    console.log('syncComment');
    return this.socket.push({
      type: 'comment',
      comment: comment,
      id2: id,
      is_countup: is_countup
    });
  };

  this.stopUser = function(user_id) {
    $("#chatting .user_" + user_id).remove();
    if ($("#chatting div").length < 1) {
      $("#chatting_title").hide();
    }
    $("#doing .user_" + user_id).remove();
    if ($("#doing div").length < 1) {
      return $("#doing_title").hide();
    }
  };

  searchMusics = function() {
    var $tracks, q;
    q = $('#track').val();
    if (q.length < 1) {
      return;
    }
    $('#tracks').html('');
    localStorage['search_music_title'] = q;
    $tracks = $('#tracks');
    Youtube.search(q, $tracks);
    Soundcloud.search(q, this.env.sc_client_id, $tracks);
    return Mixcloud.search(q, $tracks);
  };

  initHatopoppo = function() {
    var $audio;
    $('#hatopoppo').css('width', '1px');
    $audio = $('<audio></audio>');
    $audio.attr('id', 'hato');
    $audio.attr('src', '/audio/Zihou01-4.mp3');
    return $('#hatopoppo').append($audio);
  };

  getOffset = function(all_count) {
    var data;
    if (all_count >= 5) {
      return 0;
    }
    data = {
      1: 5,
      2: 4,
      3: 3,
      4: 2
    };
    return data[all_count];
  };

  renderWorkloads = function(dom) {
    var $dom, $first, $items;
    console.log('renderWorkloads');
    $dom = $("" + dom);
    $items = $("" + dom + " .workload");
    $first = $("" + dom + " .workload:first");
    $items.removeClass('col-sm-offset-2');
    $items.removeClass('col-sm-offset-3');
    $items.removeClass('col-sm-offset-4');
    $items.removeClass('col-sm-offset-5');
    return $first.addClass("col-sm-offset-" + (getOffset($items.length)));
  };

  start_unless_doing = function() {
    if (!this.env.is_doing) {
      return start_hash();
    }
  };

  artworkUrlWithNoimage = function(artwork_url) {
    return artwork_url || 'https://ruffnote.com/attachments/24162';
  };

  initWhatis = function() {
    var $day, $kokuban, $month, $youbi, day, i, i2, month, now, numbers, youbi, youbis, _i, _j;
    now = new Date();
    month = now.getMonth() + 1;
    day = now.getDate();
    youbi = now.getDay();
    numbers = {};
    for (i = _i = 1; _i <= 31; i = ++_i) {
      i2 = 24371 + i;
      numbers[i] = "https://ruffnote.com/attachments/" + i2;
    }
    youbis = {};
    for (i = _j = 1; _j <= 5; i = ++_j) {
      i2 = 24358 + i;
      youbis[i] = "https://ruffnote.com/attachments/" + i2;
    }
    youbis[0] = "https://ruffnote.com/attachments/24465";
    youbis[6] = "https://ruffnote.com/attachments/24464";
    $kokuban = $('<div></div>');
    $kokuban.css('position', 'relative');
    $kokuban.css('background', 'url(https://ruffnote.com/attachments/24501)');
    $kokuban.css('width', '735px');
    $kokuban.css('height', '483px');
    $kokuban.css('margin', '0 auto');
    $month = $('<img />');
    $month.attr('src', numbers[month]);
    $month.css('position', 'absolute');
    $month.css('right', '69px');
    $month.css('top', '36px');
    $day = $('<img />');
    $day.attr('src', numbers[day]);
    $day.css('position', 'absolute');
    $day.css('right', '70px');
    $day.css('top', '88px');
    $youbi = $('<img />');
    $youbi.attr('src', youbis[youbi]);
    $youbi.css('position', 'absolute');
    $youbi.css('right', '70px');
    $youbi.css('top', '138px');
    $kokuban.append($month);
    $kokuban.append($day);
    $kokuban.append($youbi);
    $('#whatis').css('text-align', 'center');
    return $('#whatis').html($kokuban);
  };

  initMemo = function() {
    var $textarea;
    $('#memo_title').html("<h2>MEMO</h2>\nここに入力した内容は作者（西小倉宏信）も見れてしまうので機密情報は書かないようにしてください<br />\n例：山田商事への提案書を作る→企画書を作る");
    $textarea = $('<textarea></textarea>');
    $textarea.html(localStorage['memo']);
    $textarea.css('width', '500px');
    $('#memo').html($textarea);
    return $(document).on('keypress', '#memo textarea', function() {
      return localStorage['memo'] = $('#memo textarea').val();
    });
  };

  initYou = function() {
    var cond;
    if (!Parse.User.current()) {
      return;
    }
    ruffnote(17769, 'you_title');
    cond = [["user", Parse.User.current()], ["is_done", true], ["createdAt", '<', Util.minAgo(this.env.pomotime + this.env.chattime)]];
    return ParseParse.where('Workload', cond, function(workloads) {
      var disp, workload, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = workloads.length; _i < _len; _i++) {
        workload = workloads[_i];
        if (!workload.attributes.user) {
          continue;
        }
        disp = "" + (Util.hourMin(workload.createdAt)) + "開始（" + workload.attributes.number + "回目）";
        _results.push(addWorkload("#you", workload, disp));
      }
      return _results;
    }, null, 24);
  };

  initNextkakuhen = function() {
    var time;
    ruffnote(17782, 'nextkakuhen_title');
    $('#nextkakuhen').css('font-size', '50px');
    time = (new Date("2015/1/1").getTime()) - (new Date().getTime());
    if (time > 0) {
      return Util.countDown(time, happynewyear, null, {
        dom: '#nextkakuhen'
      });
    }
  };

  happynewyear = function() {
    $('#nextkakuhen_title').hide();
    return $('#nextkakuhen').html('あけましておめでとうございます！！');
  };

  initMlkcca = function() {
    var user;
    if (user = Parse.User.current()) {
      ruffnote(17651, 'mlkcca_title');
      $('#mlkcca').html("<textarea>\n<script src=\"//cdn.mlkcca.com/v0.2.8/milkcocoa.js\"></script>\n<script>\nvar userId = '" + user.id + "';\nvar milkcocoa = new MilkCocoa(\"https://io-ui2n0gy4p.mlkcca.com:443\");\nvar spartaDataStore = milkcocoa.dataStore(\"workload\");\nspartaDataStore.on(\"push\",function(params){\n  console.log('mlkcca', params)\n  params = params.value\n  if (params.type == 'doing' && parms.workload.user.objectId == userId) {\n    alert('24分間頑張ってください！');\n  }\n});\n</script> \n</textarea>");
      $('#mlkcca textarea').css('width', '500px');
      return $('#mlkcca textarea').css('height', '250px');
    }
  };

}).call(this);
